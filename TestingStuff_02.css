body{
    font-family: Arial, Helvetica, sans-serif;
    color: aliceblue;
    
}

#Grid_Container{
    width: 80%;
    display: grid;
    grid-template-columns: 1fr 3fr 1fr;
    grid-template-rows: 2fr 3fr 1fr;
    background-color: rgb(0, 0, 0);
    gap: 1rem;
    padding: 1rem;
}

#Grid_Container :nth-child(2), :nth-child(5), :nth-child(8) {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgb(92, 95, 92);

}

#Section_01{
    background-color: aqua;
}
#Section_02{
    background-color: rgb(0, 255, 64);
}
#Section_03{
    background-color: rgb(131, 41, 190);
}
#Section_04{
    background-color: rgb(17, 0, 255);
}
#Section_05{
    background-color: rgb(143, 17, 105);
}
#Section_06{
    background-color: rgb(0, 140, 255);
}
#Section_07{
    background-color: rgb(202, 144, 159);
}
#Section_08{
    background-color: rgba(243, 0, 0, 0.281);
}
#Section_09{
    background-color: rgb(226, 146, 41);
}

#Colour_Block_01{
    background-color: red;
}
#Colour_Block_02{
    background-color: green;
}
#Colour_Block_03{
    background-color: yellow;
}


/* 

Child Selector:

Grid_Container: Targets the element with the ID or class Grid_Container (parent element).

>: The child combinator that selects direct children of Grid_Container.
   Note: Without this, it would target all nested elements, with it it targets only the outermost element

   *: The universal selector that targets all child elements of Grid_Container.
   Note: The functional difference is negligible in modern HTML if youâ€™re only dealing with elements (as most projects do).
         Use of * is optional and primarily a stylistic or explicit choice. Omitting it generally leads to cleaner and more modern-looking code.

:nth-child(2): A pseudo-class that selects the second child element of Grid_Container.
Combined: Grid_Container > *:nth-child(2) selects the second direct child element of Grid_Container. 

*/


/* grid-template-columns explanation

X X X = 3 Columns. 
X X X X = 4 Columns.
X X = 2 Columns.

1fr = 1 Fraction of the total number of elements inside the = WRONG!!

1fr = in the context of grid-template-columns = a fraction of the horizontal width of the container
1fr = in the context of grid-template-rows = a fraction of the vertical height of the container

*/

/* 
    Flex Explanations

    justify-content: center; /* Flex's confusing way of saying "Horizontal Alignment"
    align-items: center; /* Flex's confusing way of saying "Vertical Alignment"

    Grid Equivalent

    In CSS Grid, the direct equivalents of horizontal and vertical alignment are controlled 
    using the properties justify-items, align-items, justify-self, and align-self. 

    All:
    justify-items: Aligns all grid items horizontally within their cells.
    align-items: Aligns all grid items vertically within their cells.

    Singular:
    justify-self: Aligns a specific grid item horizontally within its cell.
    align-self: Aligns a specific grid item vertically within its cell.
    

*/

